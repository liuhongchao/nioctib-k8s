apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alephium
    version: 0.7.5-M
  name: alephium
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alephium
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "12973"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
      labels:
        app: alephium
      name: alephium
    spec:
      containers:
      # command: ['sleep', 'infinity']
      - args:
        env:
        - name: JAVA_OPTS
          value: -Xms256m -Xmx3072m
        image: liuhongchao/alephium:0d3017f95bf0c2837e968656e8b7083278354e5d
        imagePullPolicy: Always
        name: alephium
        volumeMounts:
          - mountPath: "/alephium-home/.alephium"
            name: alephium-home
          - mountPath: "/alephium-home/.alephium/user.conf"
            name: alephium-configs
            subPath: user.conf
#        resources:
#          limits:
#            cpu: "1"
#            memory: 3G
#          requests:
#            memory: 1500M
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      terminationGracePeriodSeconds: 30
      volumes:
        - name: alephium-home
          persistentVolumeClaim:
            claimName: alephium-blockchain-pvc-claim
        - name: alephium-configs
          configMap:
            name: alephium-configs
---
apiVersion: v1
kind: Service
metadata:
  name: alephium
spec:
  selector:
    app: alephium
  ports:
    - name: http
      protocol: TCP
      port: 12973
      targetPort: 12973
    - name: ws
      protocol: TCP
      port: 11973
      targetPort: 11973
    - name: p2p
      protocol: TCP
      port: 9973
      targetPort: 9973
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alephium-blockchain-pvc-claim
  namespace: bitcoin
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alephium-configs
  namespace: bitcoin
data:
  user.conf: |
    alephium.network.network-type = "testnet"
    alephium.discovery.bootstrap = ["3.134.244.247:9973", "18.116.66.76:9973"]

    alephium.api.network-interface = "0.0.0.0"
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: alephium-nioctib-tech-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - alephium.nioctib.tech
    secretName: alephium-nioctib-tech-it-tls
  rules:
  - host: alephium.nioctib.tech
    http:
      paths:
      - path: /
        backend:
          serviceName: alephium
          servicePort: 12973
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres
          volumeMounts:
            - name: explorer-postgres-data
              mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: explorer
      volumes:
        - name: explorer-postgres-data
          persistentVolumeClaim:
            claimName: alephium-explorer-postgres-pvc-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alephium-explorer-postgres-pvc-claim
  namespace: bitcoin
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: explorer
  name: explorer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: explorer
  template:
    metadata:
      labels:
        app: explorer
      name: explorer
    spec:
      containers:
      - args:
        env:
        - name: JAVA_OPTS
          value: -Xms256m -Xmx3072m
        image: liuhongchao/explorer-backend:ca79885ab3d4b2f49b1eadaa2949ed0b382e71d0
        imagePullPolicy: Always
        name: explorer-backend
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - args:
        env:
        - name: JAVA_OPTS
          value: -Xms256m -Xmx3072m
        image: liuhongchao/explorer:0a95bc0b5a226c6c1faa093be7f9d3be66e5065d
        imagePullPolicy: Always
        name: explorer-forntend
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: explorer
spec:
  selector:
    app: explorer
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP